{"version":3,"sources":["components/Navigation.js","components/HomePageImage.js","views/App.js","serviceWorker.js","index.js"],"names":["Navigation","useState","isOpen","setIsOpen","Navbar","id","expand","NavbarBrand","NavbarToggler","onClick","className","Collapse","navbar","Nav","NavItem","NavLink","href","icon","faLeaf","HomePageImage","class","src","alt","tabindex","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","body","style","backgroundImage","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAiDeA,EA5CI,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACdC,EADc,KACNC,EADM,KAKrB,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,cAAcC,OAAO,MAC5B,kBAACC,EAAA,EAAD,CAAaF,GAAG,qBAAhB,iBACA,kBAACG,EAAA,EAAD,CAAeC,QANZ,kBAAMN,GAAWD,IAMYQ,UAAU,OAAOL,GAAG,mBACpD,kBAACM,EAAA,EAAD,CAAUT,OAAQA,EAAQU,QAAM,GAC5B,kBAACC,EAAA,EAAD,CAAKD,QAAM,GACP,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,qFAAqFN,UAAU,eAA7G,oBAIJ,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,qFAAqFN,UAAU,eAA7G,qBAIJ,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,qFAAqFN,UAAU,eAA7G,0BAIJ,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,qFAAqFN,UAAU,eAA7G,4BAIJ,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASC,KAAK,0FAA0FN,UAAU,eAC9G,kBAAC,IAAD,CAAiBO,KAAMC,IAAQb,GAAG,oBC3BnDc,EAVO,WAClB,OACI,yBAAKC,MAAM,wBACT,yBAAKA,MAAM,8BACT,yBAAKA,MAAM,2BAA2Bf,GAAG,WAAWgB,IAAI,WAAWC,IAAI,oCAAoCC,SAAS,SCYjHC,EAbH,WACR,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWpB,GAAG,8BACV,wBAAIA,GAAG,sBAAP,gBAAyC,6BAAzC,yBACA,wBAAIA,GAAG,sBAAP,0GCAIqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SAElDD,SAASE,KAAKC,MAAMC,gBAAkB,+BDwHhC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.30c73e8a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink, Collapse, NavbarToggler } from 'reactstrap';\r\nimport { faLeaf } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst Navigation = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar id=\"navbar-body\" expand=\"md\">\r\n                <NavbarBrand id=\"navbar-brand-left\">Nick Saulnier</NavbarBrand>\r\n                <NavbarToggler onClick={toggle} className=\"mr-2\" id=\"navbar-toggler\" />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav navbar>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://pages.github.ccs.neu.edu/cs7580su20-seattle/Nicholas_Saulnier_Assignment2/\" className=\"navbar-link\">\r\n                                Notes for Notes\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://pages.github.ccs.neu.edu/cs7580su20-seattle/nicholas_saulnier_assignment3/\" className=\"navbar-link\">\r\n                                Pretty Ok Trivia\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://pages.github.ccs.neu.edu/cs7580su20-seattle/nicholas_saulnier_assignment4/\" className=\"navbar-link\">\r\n                                Lucky Star Job Search\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://pages.github.ccs.neu.edu/cs7580su20-seattle/nicholas_saulnier_assignment5/\" className=\"navbar-link\">\r\n                                Pretty Cool Discussions\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink href=\"https://github.com/NickSaulnier/Automatic-Text-Summarization-of-Privacy-Policy-Segments\" className=\"navbar-link\">\r\n                                <FontAwesomeIcon icon={faLeaf} id=\"nav-leaf\" />\r\n                            </NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nconst HomePageImage = () => {\r\n    return (\r\n        <div class=\"row custom-row-image\">\r\n          <div class=\"col-12 custom-col-12-image\">\r\n            <img class=\"rounded-circle img-fluid\" id=\"nick-pic\" src=\"hero.jpg\" alt=\"Nick's head reflected in a mirror\" tabindex=\"0\" />\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePageImage;","import React from 'react';\nimport { Container } from 'reactstrap';\nimport Navigation from '../components/Navigation';\nimport HomePageImage from '../components/HomePageImage';\n\nconst App = () => {\n    return (\n        <>\n            <Navigation />\n            <HomePageImage />\n            <Container id=\"home-page-header-container\">\n                <h1 id=\"home-page-header-1\">Nick Saulnier<br/>Msc. Computer Science</h1>\n                <h2 id=\"home-page-header-2\">A portfolio site to show off some react projects I have developed while pursuing my master's degree</h2>\n            </Container>\n        </>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App  />, document.getElementById('root'));\n\ndocument.body.style.backgroundImage = \"url('matt-nelson-space.jpg')\";\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}